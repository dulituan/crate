.. highlight:: psql
.. _administration-privileges:

==================
Cluster Privileges
==================

.. note::

    Privileges are only part of the CrateDB `Enterprise Edition`_.
    When the CrateDB Enterprise Edition is disabled, there will be
    no user privilege checks, and every statement will be executed
    without the validation of privileges.

User privileges can either be applied on a cluster level, they are then
propagated to all tables and schemas of the cluster, or they can be applied
on a specific schema or on a specif table.

.. note::

    Superusers are allowed to execute any statement without any privilege
    checks. Currently only ``DQL``, ``DML`` and ``DDL`` privileges can be
    granted. Any statements which are not allowed with those privileges,
    such as ``GRANT``, ``DENY`` and ``REVOKE``, can only be issued by
    a superuser.

Privilege Types
===============

``DQL``
.......

Granting ``Data Query Language (DQL)`` privilege to a user, indicates that this
user is allowed to execute ``SELECT``, ``SHOW``, ``REFRESH``, ``COPY TO``,
``EXPLAIN`` and ``SET SESSION`` statements, as well as using the available
user defined functions, on the object for which the privilege applies.

``DML``
.......

Granting ``Data Manipulation Language (DML)`` privilege to a user, indicates
that this user is allowed to execute ``INSERT``, ``COPY FROM```, ``UPDATE``
and ``DELETE`` statements, on the object for which the privilege applies.

``DDL``
.......

Granting ``Data Definition Language (DDL)`` privilege to a user, indicates that
this user is allowed to execute ``CREATE``, ``DROP`` and ``ALTER`` statements,
on the object for which the privilege applies.


Hierarchical Inheritance of Privileges
======================================
.. hide:

    cr> CREATE user riley;
    CREATE OK, 1 row affected (... sec)

    cr> CREATE user kala;
    CREATE OK, 1 row affected (... sec)

Privileges can be managed on three different levels, namely: ``CLUSTER``, ``SCHEMA``
and ``TABLE``.

When a privilege is assigned to an object, the privilege will propagate down the
object hierarchy. Privileges defined for a child object will always override those
from a parent object. For example::

    cr> GRANT DQL ON SCHEMA doc TO riley;
    GRANT OK, 1 row affected (... sec)

This statement will grant ``DQL`` privilege to user riley on all the tables
and functions of the ``doc`` schema::

    cr> DENY DQL ON TABLE doc.accounting TO riley;
    GRANT OK, 1 row affected (... sec)

This statement will deny ``DQL`` privilege to user riley on the ``doc`` schema table
``doc.accounting``. However, user riley, will still have ``DQL`` privilege on all the
other tables of the ``doc`` schema.

.. note::

    Privileges can be managed on all schemas and tables of the cluster,
    including the ``sys`` schema.

Behavior of ``GRANT``, ``DENY`` and ``REVOKE``
==============================================

``GRANT``
.........

.. hide:

    cr> CREATE user wolfgang;
    CREATE OK, 1 row affected (... sec)

    cr> CREATE user will;
    CREATE OK, 1 row affected (... sec)

To grant a privilege to an existing user on the whole cluster,
we use the :doc:`/sql/reference/grant`
SQL statement, for example::

    cr> GRANT DML TO wolfgang;
    GRANT OK, 1 row affected (... sec)

A privilege can be granted on a specific schema, like this::

    cr> GRANT DQL ON SCHEMA sys TO wolfgang;
    GRANT OK, 1 row affected (... sec)

A privilege can be granted on a specific table, like this::

    cr> GRANT DQL ON TABLE doc.books TO wolfgang;
    GRANT OK, 1 row affected (... sec)

If no schema is specified in the table ident, the current schema will be used.

If a user with the username specified in the SQL statement does not exist the
statement returns an error::

    cr> GRANT DQL TO layla;
    UserDoesNotExistException ...

To grant ``ALL PRIVILEGES`` to user will on the cluster, we can use the
following syntax::

    cr> GRANT ALL PRIVILEGES TO will;
    GRANT OK, 2 rows affected (... sec)

Using "ALL PRIVILEGES" is a shortcut to grant all the currently grantable
privileges to a user, namely ``DQL``, ``DML`` and ``DDL``.

Privileges can be granted to multiple users in the same statement, like so::

    cr> GRANT DDL ON TABLE doc.books TO wolfgang, will;
    GRANT OK, 2 row affected (... sec)

``DENY``
........

To deny a privilege to a user on the whole cluster use the
:doc:`/sql/reference/deny` SQL statement, for example::

    cr> DENY DDL from will;
    DENY OK, 1 row affected (... sec)

A privilege can be denied on a specific schema, like this::

    cr> DENY DQL ON SCHEMA sys TO wolfgang;
    DENY OK, 1 row affected (... sec)

A privilege can be denied on a specific table, like this::

    cr> DENY DQL ON TABLE doc.books TO wolfgang;
    DENY OK, 1 row affected (... sec)

If no schema is specified in the table ident, the current schema will be used.

If a user with the username specified in the SQL statement does not exist
the statement returns an error::

    cr> DENY DDL FROM layla;
    UserDoesNotExistException ...

``DENY ALL`` or ``DENY ALL PRIVILEGES`` will deny all privileges to a user,
it can be used like this::

    cr> DENY ALL FROM wolfgang;
    DENY OK, 3 row affected (... sec)

Privileges can be denied from multiple users in the same statement,
like so::

    cr> DENY DDL FROM wolfgang, will;
    DENY OK, 2 row affected (... sec)

``REVOKE``
..........

To revoke a privilege that was previously granted or denied to a user
use the :doc:`/sql/reference/revoke` SQL statement, for example::

    cr> REVOKE DDL from will;
    REVOKE OK, 1 row affected (... sec)

A privilege can be revoked on a specific schema, like this::

    cr> REVOKE DQL ON SCHEMA sys FROM wolfgang;
    REVOKE OK, 1 row affected (... sec)

A privilege can be revoked on a specific table, like this::

    cr> REVOKE DQL ON TABLE doc.books TO wolfgang;
    REVOKE OK, 1 row affected (... sec)

If a user with the username specified in the SQL statement does not exist the
statement returns an error::

    cr> REVOKE DDL FROM layla;
    UserDoesNotExistException ...

``REVOKE ALL`` or ``REVOKE ALL PRIVILEGES`` will revoke all privileges
that were previously granted to a user, it can be used like this::

    cr> REVOKE ALL FROM wolfgang;
    REVOKE OK, 3 row affected (... sec)

Privileges can be revoked from multiple users in the same statement,
like so::

    cr> REVOKE DDL FROM wolfgang, will;
    REVOKE OK, 2 row affected (... sec)

List Privileges
===============

CrateDB exposes privileges ``sys.privileges`` system table.

By querying the ``sys.privileges`` table you can get all
information regarding the existing privileges. E.g.::

    cr> SELECT * FROM sys.privileges;
    +-------------+-----------+---------+------------+-------+-----------+
    | grantor     | grantee   | class   | state      | type  | ident     |
    +-------------+-----------+---------+------------+-------+-----------+
    | crate       | will      | cluster | grant      | DML   | null      |
    | crate       | will      | cluster | grant      | DQL   | null      |
    +-------------+-----------+---------+------------+-------+-----------+
    SELECT 2 rows in set (... sec)

The column ``grantor`` shows the user who granted or denied the privilege,
the column ``grantee`` shows the user for whom the privilege was granted
or denied. The column ``class`` identifies on which type of context the
privilege applies. ``ident`` stands for the ident of the object that the
privilege is set on and finally ``type`` stands for the type of privileges that
was granted or denied.


.. _Enterprise Edition: https://crate.io/enterprise/
